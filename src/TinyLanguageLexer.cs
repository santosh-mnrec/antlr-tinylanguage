//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\tools\TinyLanguage\TinyLanguage.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TinyLanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQ=3, NEQ=4, PLUS=5, MINUS=6, MULT=7, DIV=8, SCOL=9, ASSIGN=10, 
		OPAR=11, CPAR=12, OBRACE=13, CBRACE=14, IF=15, ELSE=16, PRINT=17, VAR=18, 
		ID=19, INT=20, FLOAT=21, STRING=22, COMMENT=23, SPACE=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OR", "AND", "EQ", "NEQ", "PLUS", "MINUS", "MULT", "DIV", "SCOL", "ASSIGN", 
		"OPAR", "CPAR", "OBRACE", "CBRACE", "IF", "ELSE", "PRINT", "VAR", "ID", 
		"INT", "FLOAT", "STRING", "COMMENT", "SPACE"
	};


	public TinyLanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TinyLanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'+'", "'-'", "'*'", "'/'", "';'", 
		"'='", "'('", "')'", "'{'", "'}'", "'if'", "'else'", "'print'", "'var'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQ", "NEQ", "PLUS", "MINUS", "MULT", "DIV", "SCOL", 
		"ASSIGN", "OPAR", "CPAR", "OBRACE", "CBRACE", "IF", "ELSE", "PRINT", "VAR", 
		"ID", "INT", "FLOAT", "STRING", "COMMENT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TinyLanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x1A', '\xA1', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 'h', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', 'k', '\v', '\x14', '\x3', '\x15', 
		'\x6', '\x15', 'n', '\n', '\x15', '\r', '\x15', '\xE', '\x15', 'o', '\x3', 
		'\x16', '\x6', '\x16', 's', '\n', '\x16', '\r', '\x16', '\xE', '\x16', 
		't', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 'y', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '|', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x6', '\x16', '\x80', '\n', '\x16', '\r', '\x16', '\xE', '\x16', '\x81', 
		'\x5', '\x16', '\x84', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\x8A', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\x8D', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\a', '\x18', '\x97', '\n', '\x18', '\f', '\x18', '\xE', '\x18', 
		'\x9A', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x2', '\x2', '\x1A', '\x3', '\x3', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', 
		'\x13', '%', '\x14', '\'', '\x15', ')', '\x16', '+', '\x17', '-', '\x18', 
		'/', '\x19', '\x31', '\x1A', '\x3', '\x2', '\b', '\x5', '\x2', '\x43', 
		'\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', '\x43', 
		'\\', '\x61', '\x61', '\x63', '|', '\x3', '\x2', '\x32', ';', '\x5', '\x2', 
		'\f', '\f', '\xF', '\xF', '$', '$', '\x4', '\x2', '\f', '\f', '\xF', '\xF', 
		'\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '\xA9', '\x2', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x2', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x31', '\x3', '\x2', '\x2', '\x2', '\x3', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '\x36', '\x3', '\x2', '\x2', '\x2', '\a', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\t', '<', '\x3', '\x2', '\x2', '\x2', '\v', 
		'?', '\x3', '\x2', '\x2', '\x2', '\r', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x43', '\x3', '\x2', '\x2', '\x2', '\x11', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x13', 'G', '\x3', '\x2', '\x2', '\x2', '\x15', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x17', 'K', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1B', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1F', 'S', '\x3', '\x2', '\x2', 
		'\x2', '!', 'V', '\x3', '\x2', '\x2', '\x2', '#', '[', '\x3', '\x2', '\x2', 
		'\x2', '%', '\x61', '\x3', '\x2', '\x2', '\x2', '\'', '\x65', '\x3', '\x2', 
		'\x2', '\x2', ')', 'm', '\x3', '\x2', '\x2', '\x2', '+', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '-', '\x85', '\x3', '\x2', '\x2', '\x2', '/', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\a', '~', '\x2', '\x2', '\x34', '\x35', '\a', '~', '\x2', 
		'\x2', '\x35', '\x4', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', 
		'(', '\x2', '\x2', '\x37', '\x38', '\a', '(', '\x2', '\x2', '\x38', '\x6', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '?', '\x2', '\x2', ':', 
		';', '\a', '?', '\x2', '\x2', ';', '\b', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\a', '#', '\x2', '\x2', '=', '>', '\a', '?', '\x2', '\x2', '>', 
		'\n', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '-', '\x2', '\x2', '@', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '/', '\x2', '\x2', 
		'\x42', '\xE', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', ',', 
		'\x2', '\x2', '\x44', '\x10', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\a', '\x31', '\x2', '\x2', '\x46', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\a', '=', '\x2', '\x2', 'H', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '?', '\x2', '\x2', 'J', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\a', '*', '\x2', '\x2', 'L', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', '+', '\x2', '\x2', 'N', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\a', '}', '\x2', '\x2', 'P', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\a', '\x7F', '\x2', '\x2', 'R', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', 'k', '\x2', '\x2', 'T', 'U', '\a', 'h', '\x2', 
		'\x2', 'U', ' ', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', 'g', '\x2', 
		'\x2', 'W', 'X', '\a', 'n', '\x2', '\x2', 'X', 'Y', '\a', 'u', '\x2', 
		'\x2', 'Y', 'Z', '\a', 'g', '\x2', '\x2', 'Z', '\"', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', 'r', '\x2', '\x2', '\\', ']', '\a', 't', '\x2', 
		'\x2', ']', '^', '\a', 'k', '\x2', '\x2', '^', '_', '\a', 'p', '\x2', 
		'\x2', '_', '`', '\a', 'v', '\x2', '\x2', '`', '$', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\a', 'x', '\x2', '\x2', '\x62', '\x63', '\a', 
		'\x63', '\x2', '\x2', '\x63', '\x64', '\a', 't', '\x2', '\x2', '\x64', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x65', 'i', '\t', '\x2', '\x2', '\x2', 
		'\x66', 'h', '\t', '\x3', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', '(', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\t', '\x4', '\x2', 
		'\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', '*', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\t', '\x4', '\x2', 
		'\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'z', '\a', '\x30', '\x2', 
		'\x2', 'w', 'y', '\t', '\x4', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\a', 
		'\x30', '\x2', '\x2', '~', '\x80', '\t', '\x4', '\x2', '\x2', '\x7F', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'r', '\x3', '\x2', '\x2', '\x2', '\x83', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x84', ',', '\x3', '\x2', '\x2', '\x2', '\x85', '\x8B', '\a', '$', '\x2', 
		'\x2', '\x86', '\x8A', '\n', '\x5', '\x2', '\x2', '\x87', '\x88', '\a', 
		'$', '\x2', '\x2', '\x88', '\x8A', '\a', '$', '\x2', '\x2', '\x89', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8F', '\a', '$', '\x2', '\x2', '\x8F', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\x31', '\x2', '\x2', '\x91', '\x92', '\a', 
		'\x31', '\x2', '\x2', '\x92', '\x93', '\a', '\x31', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x31', '\x2', '\x2', '\x94', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x97', '\n', '\x6', '\x2', '\x2', '\x96', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\b', '\x18', '\x2', '\x2', '\x9C', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\t', '\a', '\x2', 
		'\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\b', 
		'\x19', '\x2', '\x2', '\xA0', '\x32', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x2', 'i', 'o', 't', 'z', '\x81', '\x83', '\x89', '\x8B', '\x98', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
