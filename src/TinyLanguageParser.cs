//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\tools\TinyLanguage\TinyLanguage.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TinyLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQ=3, NEQ=4, PLUS=5, MINUS=6, MULT=7, DIV=8, SCOL=9, ASSIGN=10, 
		OPAR=11, CPAR=12, OBRACE=13, CBRACE=14, IF=15, ELSE=16, PRINT=17, VAR=18, 
		ID=19, INT=20, FLOAT=21, STRING=22, COMMENT=23, SPACE=24;
	public const int
		RULE_program = 0, RULE_codeBlock = 1, RULE_statement = 2, RULE_assignment = 3, 
		RULE_if_stat = 4, RULE_condition_block = 5, RULE_stat_block = 6, RULE_print = 7, 
		RULE_expr = 8, RULE_atom = 9;
	public static readonly string[] ruleNames = {
		"program", "codeBlock", "statement", "assignment", "if_stat", "condition_block", 
		"stat_block", "print", "expr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'+'", "'-'", "'*'", "'/'", "';'", 
		"'='", "'('", "')'", "'{'", "'}'", "'if'", "'else'", "'print'", "'var'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQ", "NEQ", "PLUS", "MINUS", "MULT", "DIV", "SCOL", 
		"ASSIGN", "OPAR", "CPAR", "OBRACE", "CBRACE", "IF", "ELSE", "PRINT", "VAR", 
		"ID", "INT", "FLOAT", "STRING", "COMMENT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TinyLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TinyLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TinyLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TinyLanguageParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; codeBlock();
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterCodeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitCodeBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << PRINT) | (1L << VAR))) != 0)) {
				{
				{
				State = 23; statement();
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public If_statContext if_stat() {
			return GetRuleContext<If_statContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; assignment();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; if_stat();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 31; print();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(TinyLanguageParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(TinyLanguageParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(TinyLanguageParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(TinyLanguageParser.SCOL, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(VAR);
			State = 35; Match(ID);
			State = 36; Match(ASSIGN);
			State = 37; expr(0);
			State = 38; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statContext : ParserRuleContext {
		public ITerminalNode[] IF() { return GetTokens(TinyLanguageParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(TinyLanguageParser.IF, i);
		}
		public Condition_blockContext[] condition_block() {
			return GetRuleContexts<Condition_blockContext>();
		}
		public Condition_blockContext condition_block(int i) {
			return GetRuleContext<Condition_blockContext>(i);
		}
		public ITerminalNode[] ELSE() { return GetTokens(TinyLanguageParser.ELSE); }
		public ITerminalNode ELSE(int i) {
			return GetToken(TinyLanguageParser.ELSE, i);
		}
		public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public If_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterIf_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitIf_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statContext if_stat() {
		If_statContext _localctx = new If_statContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_stat);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(IF);
			State = 41; condition_block();
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 42; Match(ELSE);
					State = 43; Match(IF);
					State = 44; condition_block();
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 50; Match(ELSE);
				State = 51; stat_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_blockContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(TinyLanguageParser.OBRACE, 0); }
		public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(TinyLanguageParser.CBRACE, 0); }
		public Condition_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterCondition_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitCondition_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_blockContext condition_block() {
		Condition_blockContext _localctx = new Condition_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_condition_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; expr(0);
			State = 55; Match(OBRACE);
			State = 56; stat_block();
			State = 57; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_blockContext : ParserRuleContext {
		public ITerminalNode OBRACE() { return GetToken(TinyLanguageParser.OBRACE, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(TinyLanguageParser.CBRACE, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Stat_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterStat_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitStat_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_blockContext stat_block() {
		Stat_blockContext _localctx = new Stat_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat_block);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; Match(OBRACE);
				State = 60; codeBlock();
				State = 61; Match(CBRACE);
				}
				break;
			case IF:
			case PRINT:
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TinyLanguageParser.PRINT, 0); }
		public ITerminalNode OPAR() { return GetToken(TinyLanguageParser.OPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(TinyLanguageParser.CPAR, 0); }
		public ITerminalNode SCOL() { return GetToken(TinyLanguageParser.SCOL, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 14, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(PRINT);
			State = 67; Match(OPAR);
			State = 68; expr(0);
			State = 69; Match(CPAR);
			State = 70; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomExprContext : ExprContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterAtomExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitAtomExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TinyLanguageParser.OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(TinyLanguageParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(TinyLanguageParser.MINUS, 0); }
		public AdditiveExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(TinyLanguageParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(TinyLanguageParser.NEQ, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TinyLanguageParser.AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AtomExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 73; atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 89;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 87;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 75;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 76;
						((AdditiveExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditiveExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 77; expr(6);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 78;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 79;
						((EqualityExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((EqualityExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 80; expr(5);
						}
						break;
					case 3:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 81;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 82; Match(AND);
						State = 83; expr(4);
						}
						break;
					case 4:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 84;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 85; Match(OR);
						State = 86; expr(3);
						}
						break;
					}
					} 
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParExprContext : AtomContext {
		public ITerminalNode OPAR() { return GetToken(TinyLanguageParser.OPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(TinyLanguageParser.CPAR, 0); }
		public ParExprContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterParExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitParExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomContext : AtomContext {
		public ITerminalNode ID() { return GetToken(TinyLanguageParser.ID, 0); }
		public IdAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterIdAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitIdAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : AtomContext {
		public ITerminalNode STRING() { return GetToken(TinyLanguageParser.STRING, 0); }
		public StringAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterStringAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitStringAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		public ITerminalNode INT() { return GetToken(TinyLanguageParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(TinyLanguageParser.FLOAT, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.EnterNumberAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITinyLanguageListener typedListener = listener as ITinyLanguageListener;
			if (typedListener != null) typedListener.ExitNumberAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyLanguageVisitor<TResult> typedVisitor = visitor as ITinyLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		int _la;
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				_localctx = new ParExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(OPAR);
				State = 93; expr(0);
				State = 94; Match(CPAR);
				}
				break;
			case INT:
			case FLOAT:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				_la = TokenStream.LA(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ID:
				_localctx = new IdAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; Match(ID);
				}
				break;
			case STRING:
				_localctx = new StringAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1A', 'h', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x1B', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1E', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '#', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', '\x30', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x33', '\v', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x37', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x43', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'Z', '\n', '\n', '\f', '\n', '\xE', '\n', ']', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x66', '\n', '\v', '\x3', '\v', 
		'\x2', '\x3', '\x12', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x2', '\x5', '\x3', '\x2', '\a', '\b', '\x3', 
		'\x2', '\x5', '\x6', '\x3', '\x2', '\x16', '\x17', '\x2', 'j', '\x2', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\"', '\x3', '\x2', '\x2', '\x2', '\b', '$', '\x3', '\x2', 
		'\x2', '\x2', '\n', '*', '\x3', '\x2', '\x2', '\x2', '\f', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x42', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x12', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x65', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', 
		'\x4', '\x3', '\x2', '\x17', '\x18', '\a', '\x2', '\x2', '\x3', '\x18', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1B', '\x5', '\x6', '\x4', 
		'\x2', '\x1A', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', '#', '\x5', 
		'\b', '\x5', '\x2', ' ', '#', '\x5', '\n', '\x6', '\x2', '!', '#', '\x5', 
		'\x10', '\t', '\x2', '\"', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', 
		'\a', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\x14', '\x2', '\x2', 
		'%', '&', '\a', '\x15', '\x2', '\x2', '&', '\'', '\a', '\f', '\x2', '\x2', 
		'\'', '(', '\x5', '\x12', '\n', '\x2', '(', ')', '\a', '\v', '\x2', '\x2', 
		')', '\t', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x11', '\x2', 
		'\x2', '+', '\x31', '\x5', '\f', '\a', '\x2', ',', '-', '\a', '\x12', 
		'\x2', '\x2', '-', '.', '\a', '\x11', '\x2', '\x2', '.', '\x30', '\x5', 
		'\f', '\a', '\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\x12', '\x2', '\x2', '\x35', '\x37', '\x5', '\xE', '\b', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\v', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', 
		'\x12', '\n', '\x2', '\x39', ':', '\a', '\xF', '\x2', '\x2', ':', ';', 
		'\x5', '\xE', '\b', '\x2', ';', '<', '\a', '\x10', '\x2', '\x2', '<', 
		'\r', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\xF', '\x2', '\x2', 
		'>', '?', '\x5', '\x4', '\x3', '\x2', '?', '@', '\a', '\x10', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x5', '\x6', 
		'\x4', '\x2', '\x42', '=', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\x13', '\x2', '\x2', '\x45', '\x46', '\a', '\r', 
		'\x2', '\x2', '\x46', 'G', '\x5', '\x12', '\n', '\x2', 'G', 'H', '\a', 
		'\xE', '\x2', '\x2', 'H', 'I', '\a', '\v', '\x2', '\x2', 'I', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\b', '\n', '\x1', '\x2', 'K', 'L', 
		'\x5', '\x14', '\v', '\x2', 'L', '[', '\x3', '\x2', '\x2', '\x2', 'M', 
		'N', '\f', '\a', '\x2', '\x2', 'N', 'O', '\t', '\x2', '\x2', '\x2', 'O', 
		'Z', '\x5', '\x12', '\n', '\b', 'P', 'Q', '\f', '\x6', '\x2', '\x2', 'Q', 
		'R', '\t', '\x3', '\x2', '\x2', 'R', 'Z', '\x5', '\x12', '\n', '\a', 'S', 
		'T', '\f', '\x5', '\x2', '\x2', 'T', 'U', '\a', '\x4', '\x2', '\x2', 'U', 
		'Z', '\x5', '\x12', '\n', '\x6', 'V', 'W', '\f', '\x4', '\x2', '\x2', 
		'W', 'X', '\a', '\x3', '\x2', '\x2', 'X', 'Z', '\x5', '\x12', '\n', '\x5', 
		'Y', 'M', '\x3', '\x2', '\x2', '\x2', 'Y', 'P', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'S', '\x3', '\x2', '\x2', '\x2', 'Y', 'V', '\x3', '\x2', '\x2', '\x2', 
		'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x13', '\x3', '\x2', '\x2', 
		'\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\r', '\x2', 
		'\x2', '_', '`', '\x5', '\x12', '\n', '\x2', '`', '\x61', '\a', '\xE', 
		'\x2', '\x2', '\x61', '\x66', '\x3', '\x2', '\x2', '\x2', '\x62', '\x66', 
		'\t', '\x4', '\x2', '\x2', '\x63', '\x66', '\a', '\x15', '\x2', '\x2', 
		'\x64', '\x66', '\a', '\x18', '\x2', '\x2', '\x65', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x15', '\x3', '\x2', '\x2', '\x2', '\n', '\x1C', '\"', '\x31', 
		'\x36', '\x42', 'Y', '[', '\x65',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
