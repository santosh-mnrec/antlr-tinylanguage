//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\tools\TinyLanguage\TinyLanguage.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="TinyLanguageParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ITinyLanguageVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] TinyLanguageParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.codeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCodeBlock([NotNull] TinyLanguageParser.CodeBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] TinyLanguageParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] TinyLanguageParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.if_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf_stat([NotNull] TinyLanguageParser.If_statContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.condition_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondition_block([NotNull] TinyLanguageParser.Condition_blockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.stat_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStat_block([NotNull] TinyLanguageParser.Stat_blockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="TinyLanguageParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrint([NotNull] TinyLanguageParser.PrintContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>atomExpr</c>
	/// labeled alternative in <see cref="TinyLanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAtomExpr([NotNull] TinyLanguageParser.AtomExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="TinyLanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrExpr([NotNull] TinyLanguageParser.OrExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>additiveExpr</c>
	/// labeled alternative in <see cref="TinyLanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpr([NotNull] TinyLanguageParser.AdditiveExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>equalityExpr</c>
	/// labeled alternative in <see cref="TinyLanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpr([NotNull] TinyLanguageParser.EqualityExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="TinyLanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndExpr([NotNull] TinyLanguageParser.AndExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parExpr</c>
	/// labeled alternative in <see cref="TinyLanguageParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParExpr([NotNull] TinyLanguageParser.ParExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberAtom</c>
	/// labeled alternative in <see cref="TinyLanguageParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberAtom([NotNull] TinyLanguageParser.NumberAtomContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>idAtom</c>
	/// labeled alternative in <see cref="TinyLanguageParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdAtom([NotNull] TinyLanguageParser.IdAtomContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringAtom</c>
	/// labeled alternative in <see cref="TinyLanguageParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringAtom([NotNull] TinyLanguageParser.StringAtomContext context);
}
